The functions and external variables that make up a C program need not all be compiled at the
same time; the source text of the program may be kept in several files, and previously compiled
routines may be loaded from libraries. Among the questions of interest are
• How are declarations written so that variables are properly declared during
compilation?
• How are declarations arranged so that all the pieces will be properly connected when
the program is loaded?
• How are declarations organized so there is only one copy?
• How are external variables initialized?

The scope of a name is the part of the program within which the name can be used. 
For an automatic variable declared at the beginning of a function, the scope is the function in which
the name is declared. Local variables of the same name in different functions are unrelated. The
same is true of the parameters of the function, which are in effect local variables.

外部变量 函数 的作用域 始于其声明位置，终于所在文件末尾。
The scope of an external variable or a function lasts from the point at which it is declared to
the end of the file being compiled.

如果要在外部变量的定义之前使用该变量，或者外部变量的定义与变量的使用不在同一个源文件中则
必须在相应的变量声明中强制性地使用关键字extern。

区分声明（declaration）与定义（definition）

定义：
int sp;
double val[MAXVAL];
出现在函数之外，那么这两条语句将定义外部变量sp与val，并为之分配存储单元，
同时这两条语句还可以作为该源文件中其余部分的声明。

声明：
extern int sp;
extern double val[];
declare for the rest of the source file that sp is an int and that val is a double array (whose
size is determined elsewhere), but they do not create the variables or reserve storage for them.

There must be only one definition of an external variable among all the files that make up the
source program; other files may contain extern declarations to access it. (There may also be
extern declarations in the file containing the definition.) Array sizes must be specified with the
definition, but are optional with an  extern declaration.

Initialization of an external variable goes only with the definition.





C functions may be used recursively; that is, a function may call itself either directly or
indirectly. 
Consider printing a number as a character string. As we mentioned before, the digits
are generated in the wrong order: low-order digits are available before high-order digits, but
they have to be printed the other way around.

There are two solutions to this problem. On is to store the digits in an array as they are
generated, then print them in the reverse order, as we did with itoa in section 3.6. 

The alternative is a recursive solution, in which printd first calls itself to cope with any leading
digits, then prints the trailing digit. Again, this version can fail on the largest negative number.

#include <stdio.h>
/* printd: print n in decimal */
void printd(int n)
{
  if (n < 0) {
    putchar('-');
    n = -n;
  }
  if (n / 10)
    printd(n / 10);
  putchar(n % 10 + '0');
}
